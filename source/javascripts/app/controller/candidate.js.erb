var domain = document.location.href;
if(domain.match(/^https:\/\/([a-z0-9_-]*).votolegal.org.br/) || domain.match(/votolegal.org.br\/candidato/)) { 
  app.votolegal.config(['$routeProvider', function($routeProvider) {
    $routeProvider.
    when('/', {
      templateUrl: '/javascripts/app/view/candidato/index.tmpl',
      controller: 'CandidateController',
    }).
    when('/doar', {
      templateUrl: '/javascripts/app/view/candidato/doar.tmpl',
      controller: 'CandidateController',
    }).
    otherwise({
      redirectTo: '/',
    });
  }]);

  /**
   * Grafic interface and style interactions
   */
  $(document).ready(function(){
    $('body').on('click', 'input.opcao_doar_radio', function(e){
      e.preventDefault;
      if ($(this).hasClass('opcao_doar_diff')){
        $(this).closest('.valor-doa-container').find('.doar-number-diferente').attr('disabled', false);
      }else{
        $('.doar-number-diferente').attr('disabled', true);
      }
      $('.valor-doa-container').removeClass('doa-container-active');
      $(this).closest('.valor-doa-container').addClass('doa-container-active');
    });
    $('input.opcao_doar_radio:checked').trigger('click');
  });
}

/**
 * Candidate Controller
 */
app.votolegal.controller('CandidateController', ["$scope", "$http", "$sce", "serialize", "auth_service", "SweetAlert", "trouble", "postmon", function($scope, $http, $sce, serialize, auth_service, SweetAlert, trouble, postmon){
  // defaults
  $scope.candidate  = {};
  $scope.doar       = {};
  $scope.payment    = {};
  // getting candidate name from url
  $scope.name = (function get_subdomain(){
    var url = document.location.href;
    url = url.split(/\//)[2].split('.')[0];
    if(url !== 'localhost') return url;
  })();
  $scope.month_list = (function(){
    list = [];
    for(var i=1; i<=12; i++) { list.push(i); }
    return list;
  })();
  $scope.year_list = (function(){
    list = [];
    for (var i = 2016; i<=2030; i++) { list.push(i); }
    return list;
  })();


  // methods
  $scope.make_percent = function(number, total){
    if(total === 0) return '0%';
    return ((number/total) * 100).toFixed(2) + '%'
  };

  $scope.render_video = function(src){
    return '<iframe id="candidate_video" src="' + $sce.trustAsResourceUrl(src) + '" width="560" height="315" allowfullscreen></iframe>';
  };

  $scope._issues_priorities_decorator = function(separator){
    return $scope.candidate.candidate_issue_priorities
      .map(function(i){ return i.name })
      .join(separator || ', ')
  };

  $scope.candidate_by_name = function(name){
    $http({
      method: 'GET',
      url: '<%= config[:api_host]%>/candidate/'+ name,
    }).
    then(
      function(response){
        var res = response.data.candidate;
        $scope.candidate = res;

        (function(){
          var title = document.querySelector('title');
          if(title.innerText === 'VotoLegal - Candidato(a)') 
            title.innerText += (" " + $scope.candidate.popular_name);
        })();

        (function(){
          var video = $scope.candidate.video_url;
          if(video.match('youtube'))
            $scope.candidate.video_url = 'https://www.youtube.com/embed/' + URI.init(video).query('v')
        })();

        // header issues list
        $scope.candidate.issues_decorator = $scope._issues_priorities_decorator();

        // default total donated
        $scope.candidate.total_donated = $scope.candidate.total_donated || 0.0;
        $scope.candidate.raising_goal = parseFloat($scope.candidate.raising_goal) || 0.0;

        // video renderer
        (function(){
          var v = document.querySelector('#video-renderer');
          if(v) v.innerHTML = $scope.render_video(res.video_url);
        })();

        // load projects
        $scope.candidate.projects = [];
        $scope.candidate_projects(res);
      },
      function(response){
        trouble.shoot({
          route: document.location.href, error: JSON.stringify(response)
        });
        throw new Error('Model is invalid or cannot be found!');
      }
    );
    return false;
  };

  /* fetch zip_code info */
  $scope.billing_by_zipcode = function(event){
    var zipcode = $scope.doar.billing_address_zipcode;

    if(zipcode.length == 9){
      postmon(zipcode).then(
        // success callback
        function(response) {
          var res = response.data, $f = $scope.doar;
          $f.billing_address_city   = res.cidade;
          $f.billing_address_state  = res.estado_info.nome;
          
          // load district
          var district = document.querySelector('form[name=doarForm] *[name=billing_address_district]');
          if(res.bairro) { $f.billing_address_district = res.bairro; district.disabled = true }
          else {  $f.billing_address_district = ""; district.disabled = false }

          // load street
          var street = document.querySelector('form[name=doarForm] *[name=billing_address_street]');
          if(res.logradouro) { $f.billing_address_street = res.logradouro; street.disabled = true }
          else { $f.billing_address_street = ""; street.disabled = false }
        },
        // error callback
        function(response){
          swal({ title: "Problemas ao carregar os dados do CEP!", text: "Ocorreu um erro ao tentar carregar os dados de sua localidade. Verifique o CEP e tente novamente." });
          ['billing_address_state', 'billing_address_city', 'billing_address_district', 'billing_address_street'].map(function(i){ 
            try{ 
              $scope.candidate[i] = "";
              document.querySelector('form[name=doarForm] *[name='+i+']').disabled = true;
            } catch(e) {};
          });
          throw new Error("ERROR_GET_ZIPCODE");
        }
      );
    }

    return false;
  };
  $scope.address_by_zipcode = function(event){
    var zipcode = $scope.doar.address_zipcode;

    if(zipcode.length == 9){
      postmon(zipcode).then(
        // success callback
        function(response) {
          var res = response.data, $f = $scope.doar;
          $f.address_city   = res.cidade;
          $f.address_state  = res.estado_info.nome;
          
          // load district
          var district = document.querySelector('form[name=doarForm] *[name=address_district]');
          if(res.bairro) { $f.address_district = res.bairro; district.disabled = true }
          else {  $f.address_district = ""; district.disabled = false }

          // load street
          var street = document.querySelector('form[name=doarForm] *[name=address_street]');
          if(res.logradouro) { $f.address_street = res.logradouro; street.disabled = true }
          else { $f.address_street = ""; street.disabled = false }
        },
        // error callback
        function(response){
          swal({ title: "Problemas ao carregar os dados do CEP!", text: "Ocorreu um erro ao tentar carregar os dados de sua localidade. Verifique o CEP e tente novamente." });
          ['address_state', 'address_city', 'address_district', 'address_street'].map(function(i){ 
            try{ 
              $scope.candidate[i] = "";
              document.querySelector('form[name=doarForm] *[name='+i+']').disabled = true;
            } catch(e) {};
          });
          throw new Error("ERROR_GET_ZIPCODE");
        }
      );
    }

    return false;
  };


  /* fetch candidate projects */
  $scope.candidate_projects = function(candidate){
    $http({
      method: 'GET',
      url: '<%= config[:api_host]%>/candidate/'+ candidate.id +'/projects',
    }).
    then(
      function(response){
        var res = response.data.projects;
        
        (function(){
          var total = 0; res.map(function(p){ total += p.votes });
          res = res.map(function(i){ i.total = total; return i });
        })();

        $scope.candidate.projects = res;
      },
      function(response){
        trouble.shoot({
          route: document.location.href, error: JSON.stringify(response)
        });
        throw new Error('Project list is invalid or cannot be found!');
      }
    );
    return false;
  };


  /* setting donation amount */
  $scope.doar_continue = function(amount){
    if(!amount || amount < 10.00){
      SweetAlert.swal('Preencha um valor superior a 10,00 reais.');
      return false;
    }

    document.getElementById('amount-review').classList.remove('hide');
    var list = document.querySelectorAll('.valor-doa-container');
    for(var i in list) {
      if(list[i] && list[i].classList) list[i].classList.add('hide');
    }
    document.getElementById('doar-form').classList.remove('hide');

    // update amount value
    $scope.doar.amount = parseFloat(amount);

    $scope.get_session();
  };


  /* doar edit method*/
  $scope.doar_edit = function(amount){
    document.getElementById('amount-review').classList.add('hide');
    var list = document.querySelectorAll('.valor-doa-container');
    for(var i in list) {
      if(list[i] && list[i].classList) list[i].classList.remove('hide');
    }
    document.getElementById('doar-form').classList.add('hide');
  };


  /* getting session */
  $scope.get_session = function(){
    var id = $scope.candidate.id || 0;
    $http({
      url: '<%= config[:api_host] %>/candidate/'+id+'/donate/session'
    }).
    then(function(response){
      $scope.payment.session = response.data.id;
      console.log('SESSION: '+ response.data.id);
      PagSeguroDirectPayment.setSessionId(response.data.id);
    }, function(response){
      trouble.shoot({
        route: '/cadastro/boleto', error: JSON.stringify(response)
      });
      throw new Error("ERROR_GET_SESSION");
    });
    return false
  };

  $scope.get_brand = function(card_number){
    var bin = card_number.slice(0, 6);

    // getting card brand
    if(card_number.length == 6){
      $scope.card_brand({
        // 6 first digits
        bin: card_number.slice(0, 6),

        // success callback
        success_cb: function(response){
          var brand = response.brand;
          var image = document.querySelector('#card-image');
          if(image){
            image.innerHTML = '<img src="//stc.pagseguro.uol.com.br/public/img/payment-methods-flags/42x20/'+brand.name+'.png" alt="'+brand.name+'" title="'+brand.name+'">';
          }
        },

        // success callback
        error_cb: function(response){
          var image = document.querySelector('#card-image');
          if(image){
            image.classList.add('text-danger');
            image.innerText = '(bandeira do cartão não encontrada)';
          }
        }
      });
    }
    return false;
  };

  /* sender donartion */
  $scope.send_donation = function(){
    // sender
    var sender = PagSeguroDirectPayment.getSenderHash();
    $scope.doar.sender_hash = sender;
    console.log('SENDER: '+ sender);

    // getting card
    var card = $scope.card_params();
    console.log(card);


    // getting card brand
    $scope.card_brand({
      // 6 first digits
      bin: card.card_number.slice(0, 6),

      // success callback
      success_cb: function(response){
        var brand = (response.brand)? response.brand: undefined;

        console.log(brand);

        if(brand){
          $scope.card_token({
            // credit card data
            card_number: card.card_number,
            brand:       brand.name,
            cvv:         card.card_cvv,
            month:       card.card_month,
            year:        card.card_year,

            // success callback
            success_cb: function(response){
              $scope.doar.credit_card_token = response.card.token;

              // getting params
              var params = $scope.donation_params();

              // TODO send to backend
              $scope.error_list = [];
              $http({
                method:  'POST',
                url :    '<%= config[:api_host] %>/candidate/'+ $scope.candidate.id +'/donate',
                data:    serialize.from_object(params),
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              }).
              then(function(response){
              
              }, function(response){

                for(var e in response.data.form_error){
                  console.log(e);
                }
              
              });

            },

            // error callback
            error_cb: function(response){
              SweetAlert.swal('Cartão inválido', 'Não foi possível obter as informações do cartão!');
              throw new Error('CARDBRAND_GET_ERROR');
            },
          });
        }
      },

      // error callback
      error_cb: function(response){
        SweetAlert.swal('Cartão inválido', 'Não foi possível obter as informações do cartão!');
        throw new Error('CARDBRAND_GET_ERROR');
      }
    });

  };

  /* payment methods */
  $scope.payment_method = function(opts){
    PagSeguroDirectPayment.getPaymentMethods({
      amount:   parseFloat(opts.amount),
      success:  opts.success_cb,
      error:    opts.error_cb,
      complete: opts.complete_cb
    });
  };

  // card brand
  $scope.card_brand = function(opts){
    PagSeguroDirectPayment.getBrand({
      cardBin:  opts.bin,
      success:  opts.success_cb  || function(){},
      error:    opts.error_cb    || function(){},
      complete: opts.complete_cb || function(){}
    });
  };

  // card token
  $scope.card_token = function(opts){
    PagSeguroDirectPayment.createCardToken({
      cardNumber:       opts.card_number,
      brand:            opts.brand,
      cvv:              opts.cvv,
      expirationMonth:  opts.month,
      expirationYear:   opts.year,
      success:          opts.success_cb   || function(){},
      error:            opts.error_cb     || function(){},
      complete:         opts.complete_cb  || function(){}
    });
  };

  $scope.same_billing_addr = function(){
    var billing_address = document.querySelector('#billing_address');
    
    if(billing_address.classList.contains('hide')){
      billing_address.classList.remove('hide');
    } 
    else {
      billing_address.classList.add('hide');
    }

    return false;
  };
  

  $scope.donation_params = function(){
    $scope.doar.credit_card_name = $scope.doar.name;

    return Params
      .require($scope.doar)
      .permit('name', 'cpf', 'email', 'phone', 'birthdate', 'address_street', 'address_house_number', 'address_district', 'address_zipcode', 'address_city', 'address_state', 'billing_address_street', 'billing_address_house_number', 'billing_address_complement', 'billing_address_district', 'billing_address_zipcode', 'billing_address_city', 'billing_address_state', 'credit_card_name', 'amount', 'sender_hash', 'credit_card_token')
  };

  $scope.card_params = function(){
    return Params
      .require($scope.payment)
      .permit('card_number', 'card_month', 'card_year', 'card_cvv')
  };


  $scope.candidate_by_name($scope.name);
}]);
