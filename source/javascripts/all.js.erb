
(function(){

  /**
   * Form object
   * Interface to interact with html form elements
   */
  var Form = {

    // getting form methods
    get: function(name){
      this._form = document.forms[name];
      return this;
    },
    get_form: function(name){
      if(name !== undefined)
        return document.forms[name];
      else 
        return this._form;
    },
    
    first: function(){
      this._form = document.forms[0];
      return this;
    },

    indice: function(i){
      this._form = document.forms[i];
      return this;
    },

    // getting field methods
    field: function(name){
      if(this._form !== undefined){
        this.fields(name);
        if(this._field.length > 1) this._field = this.fields[0];
      }

      return this;
    },
    fields: function(name){
      if(this._form !== undefined)
        this._field = this._form[name];

      return this;
    },
    get_field: function(name){
      if (name !== undefined){
        return this.get_fields(name)[0]
      } else {
        if(this._field.length > 1) return this._field[0];
        else return this._field[0];
      }
    },
    get_fields: function(name){
      if (name !== undefined)
        return this._form[name]
      else
        return this._field;
    },

    // getting attributes method
    attr: function(name){
      if(this._field !== undefined){
        if(this._field.attributes[name]) return this._field.attributes[name]
      }
      return "";
    }
  };


  /**
   * Serializer
   */
  var Serializer = function(){
    this.from_object = function(data){
      var buffer = [];
      
      if (typeof data !== 'object')
        throw new Error('Param to be serializer isnt a object');
      
      for (var name in data) {
        if (!data.hasOwnProperty(name)) {
          continue;
        }
        var value = data[name];
        buffer.push(
          encodeURIComponent(name) + "=" +
          encodeURIComponent( ( value == null ) ? "" : value )
        );
      }

      return buffer.join( "&" ).replace(/%20/g, "+");
    };

    this.from_form = function(element_id){
      var f = document.forms[element_id];
      
      var buffer = {};
      for(var i in f.elements){
        if(f.elements[i].type !== undefined)
          buffer[f.elements[i].name] = f.elements[i].value;
      }
      return this.from_object(buffer);
    };

    this.to_json = function(data){
      return JSON.stringify(data);
    };
  };

  var app = angular.module('votolegal', ['ngMask']);
  app.config(['$httpProvider', function($httpProvider) {
    delete $httpProvider.defaults.headers.common["X-Requested-With"];
    $httpProvider.defaults.headers.common["Content-Type"] = 'application/x-www-form-urlencoded';
  }]);

  /**
   * Postmon Service
   * Connect to the Postmon service API to get zipcode informations
   */ 
  app.factory('postmon', ['$http', function($http){
    return function(zipcode) {
      return $http.get(
        'http://api.postmon.com.br/v1/cep/' + zipcode, {cache: false}
      );
    }
  }]);

  /**
   * Serializer Service
   */ 
  app.factory('serialize', function(){
    return new Serializer();
  });


  /**
   * PreCadastro controller
   * Register a new candidate to be moderated by admin team
   */ 
  app.controller('PreCadastroController', 
    ['$scope', '$http', 'postmon', 'serialize', function($scope, $http, postmon, serialize){
    $scope.candidate = {};

    // getting form params
    $scope.register_params = function(){
      return $scope.candidate;
    };

    // create a new cadidate
    $scope.create = function(isValid){
      var params = $scope.register_params();

      $http({
        method: 'POST', 
        url: '<%= config[:api_host] %>/register', 
        data: serialize.from_object(params),
        headers: {'Content-Type': 'application/x-www-form-urlencoded'}
      })
      .then(
        // success callback
        function(response){
          var res = response.data;
          console.debug('SUCCESS');
          //document.location = '/pre-cadastro/success';
          return false;
        },
        // error callback
        function(response){
          var res = response.data.form_error;
          console.log(res);

          // error messages
          var error_msg  = function(token){
            var msg_list = {
              "missing": " não foi preenchido.",
              "already exists": " já foi cadastrado.",
              "invalid" : " está inválido."
            };
            return msg_list[token];
          };

          // setting error message
          $scope.error_list = [];
          for(var field in res){
            var el = document.querySelector('*[name='+field+']');
            var name = el.attributes['placeholder'].value;
            $scope.error_list.push(name + error_msg(res[field]));
          }

          // throw an exception
          throw new Error("ERROR_POST_NEW_CADIDATE");
          return false;
        }
      );

      return false;
    };

    // load zipcode meta informations
    $scope.address_by_zipcode = function(event){
      var zipcode = $scope.candidate.address_zipcode;

      if(zipcode.length == 9){
        postmon(zipcode).then(
          // success callback
          function(response) {
            var res = response.data, $f = $scope.candidate;
            $f.address_city = res.cidade;
            $f.address_state = res.estado_info.nome;
            if(res.bairro && res.logradouro) 
              $f.address_street = res.logradouro + " - " + res.bairro;
          },
          // error callback
          function(response){
            swal({ title: "Problemas ao carregar os dados do CEP!", text: "Ocorreu um erro ao tentar carregar os dados de sua localidade. Por gentileza preencha os campos manualmente." });
            throw new Exception("ERROR_GET_ZIPCODE");
          }
        );
      }

      return false;
    };

    $scope.load_parties = function(){
      $http.get('<%= config[:api_host] %>/party')
      .then(
        // success callback
        function(response){ $scope.party_list = response.data.party; },
        // error callback
        function(response){ $scope.party_list = []; throw new Exception("ERROR_GET_PARTY_LIST"); }
      );
    };
    
    $scope.load_offices = function(){
      $http.get('<%= config[:api_host] %>/office')
      .then(
        // success callback
        function(response){
          $scope.office_list = response.data.office;
        },
        // error callback
        function(response){
          $scope.office_list = [];
          throw new Exception("ERROR_GET_OFFICE_LIST");
        }
      );
    };
    
    // reset form fields
    $scope.reset = function(){
      $scope.candidate = {};
    };


    // load parties from api
    $scope.load_offices();
    $scope.load_parties();
  }]);
  /**
   * PreCadastro controller
   * Register a new candidate to be moderated by admin team
   */ 
  app.controller('ContatoController', 
    ['$scope', '$http', 'serialize', function($scope, $http, serialize){
    $scope.message = {};

    // getting form params
    $scope.message_params = function(){
      return $scope.message;
    };

    // create a new cadidate
    $scope.create = function(isValid){
      var params = $scope.message_params();

      $http({
        method: 'POST', 
        url: '<%= config[:api_host] %>/contact', 
        data: serialize.from_object(params),
        headers : {'Content-Type': 'application/x-www-form-urlencoded'}
      })
      .then(
        // success callback
        function(response){
          var res = response.data;
          console.log(res);
          return false;
        },
        // error callback
        function(response){
          var res = response.data.form_error;
          console.log(res);

          var f = function(field){
            return document.querySelector('*[name='+field+']');
          };

          // error messages
          var error_msg  = function(token){
            var msg_list = {
              "missing": " não foi preenchido.",
              "already exists": " já foi cadastrado.",
              "invalid" : " está inválido."
            };
            return msg_list[token];
          };

          // setting error message
          $scope.error_list = [];
          for(var field in res){
            var name = f(field).attributes['placeholder'].value;
            $scope.error_list.push(name + error_msg(res[field]));
          }

          // throw an exception
          throw new Error("ERROR_POST_NEW_CONTACT");
          return false;
        }
      );

      return false;
    };

  }]);
})();
