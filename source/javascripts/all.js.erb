(function(app){

  /**
   * Array polyfills
   */
  if (!Array.prototype.map) {
    Array.prototype.map = function(callback, thisArg) {
      var T, A, k;
      if (this == null) throw new TypeError(' this is null or not defined');
      var O = Object(this);
      var len = O.length >>> 0;
      if (typeof callback !== 'function') throw new TypeError(callback + ' is not a function');
      if (arguments.length > 1) T = thisArg;
      A = new Array(len);
      k = 0;
      while (k < len) {
        var kValue, mappedValue;
        if (k in O) {
          kValue = O[k];
          mappedValue = callback.call(T, kValue, k, O);
          A[k] = mappedValue;
        }
        k++;
      }
      return A;
    };
  }
  if (!Array.prototype.filter) {
    Array.prototype.filter = function(fun) {
      'use strict';

      if (this === void 0 || this === null) throw new TypeError();

      var t = Object(this);
      var len = t.length >>> 0;
      if (typeof fun !== 'function') throw new TypeError();

      var res = [];
      var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
      for (var i = 0; i < len; i++) {
        if (i in t) {
          var val = t[i];
          if (fun.call(thisArg, val, i, t)) res.push(val);
        }
      }
      return res;
    };
  }

  var URI = {
    absolute: function(){
      return document.location.href;
    },
    query: function(name) {
      var url = this.absolute();
      name = name.replace(/[\[\]]/g, "\\$&");
      var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
          results = regex.exec(url);
      if (!results) return null;
      if (!results[2]) return '';
      return decodeURIComponent(results[2].replace(/\+/g, " "));
    } 
  };


  var Params = {
    _value: undefined,
    require: function(value){
      if(value == null || value == undefined) 
        throw new Error('value cannot be undefined');
      
      this._value = value;

      return this;
    },
    permit: function(){
      var _self = this;

      var param_list = {};
      angular.forEach(arguments, function(i){
        if(_self._value.hasOwnProperty(i)) 
          return param_list[i] = _self._value[i] || "";
      });

      return param_list;
    },
    normalize: function(value){
      return name.split(/\s+/)
        .map(function(i){ 
          i = i.toLowerCase();
          if(i.length >= 3) return i.charAt(0).toUpperCase() + i.slice(1);
          if(i.length < 3) return i;
        });
    }
  };
  

  /**
   * Serializer
   */
  var Serializer = function(){
    this.from_object = function(data){
      var buffer = [];
      
      if (typeof data !== 'object')
        throw new Error('Param to be serializer isnt a object');
      
      for (var name in data) {
        if (!data.hasOwnProperty(name)) {
          continue;
        }
        var value = data[name];
        buffer.push(
          encodeURIComponent(name) + "=" +
          encodeURIComponent( ( value == null ) ? "" : value )
        );
      }

      return buffer.join( "&" ).replace(/%20/g, "+");
    };

    this.from_form = function(element_id){
      var f = document.forms[element_id];
      
      var buffer = {};
      for(var i in f.elements){
        if(f.elements[i].type !== undefined)
          buffer[f.elements[i].name] = f.elements[i].value;
      }
      return this.from_object(buffer);
    };

    this.to_json = function(data){
      return JSON.stringify(data);
    };
  };


  // error messages translation
  var error_msg  = function(token){
    var msg_list = {
      "missing"               : " não foi preenchido.",
      "invalid"               : " está inválido.",
      "already exists"        : " já foi cadastrado.",
      "access denied"         : "Acesso negado!",
      "Bad email or password.": "E-mail ou senha inválidos.",
      "invalid token"         : " é invalido ou esta expirado."
    };
    return msg_list[token];
  };

  /**
   * VotoLegal Project App
   */
  app.votolegal = angular.module('votolegal', ['ngRoute', 'ngMask', 'ngSanitize', 'angular-storage', 'idf.br-filters', 'oitozero.ngSweetAlert', 'ui.utils.masks', 'ui.bootstrap']);
  app.votolegal.config(['$httpProvider', '$locationProvider', function($httpProvider, $locationProvider) {
    // http configurations
    delete $httpProvider.defaults.headers.common["X-Requested-With"];
    $httpProvider.defaults.headers.common["Content-Type"] = 'application/x-www-form-urlencoded';

    // location configurations
    $locationProvider.html5Mode(false);
  }]);

  /**
   * Show String as HTML
   */
  app.votolegal.filter('unsafe', ['$sce', function($sce){
    return function(val){ return $sce.trustAsHtml(val) };
  }]);

  /**
   * Postmon Service
   * Connect to the Postmon service API to get zipcode informations
   */ 
  app.votolegal.factory('postmon', ['$http', function($http){
    return function(zipcode) {
      return $http.get('//api.postmon.com.br/v1/cep/' + zipcode, {cache: false});
    }
  }]);

  /**
   * Troublesoting Service
   * Connect to the Postmon service API to get zipcode informations
   */ 
  app.votolegal.factory('trouble', ['$http', function($http){
    return {
      shoot: function(params) {
        if(!params.hasOwnProperty('route')) console.log('route param for troubleshoot is required');
        if(!params.hasOwnProperty('error')) console.log('error param for troubleshoot is required');

        if(params.hasOwnProperty('route') && params.hasOwnProperty('error')){
          $http.post('<%= config[:api_host]%>/troubleshoot', params);
        }
      }
    }
  }]);

  /**
   * Serializer Service
   */ 
  app.votolegal.factory('serialize', function(){ return new Serializer() });


  /**
   * Authentication Service
   */ 
  app.votolegal.factory('auth_service', ['$http', 'serialize', 'store', function($http, serialize, store){ 
    return {
      // attributes
      session_key: 'user',
      sign_page  : '/',
      admin_page : '/admin',
      role_list  : {
        admin: '/admin', user: '/pre-cadastro/aprovado'
      },

      // methods
      authenticate: function(username, password) {
        return $http({
          method: 'POST',
          url: '<%= config[:api_host] %>/login',
          data: serialize.from_object({"email": username, "password": password}),
          headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        });
      },
      
      // forgot password
      forgot_password: function(username){
        return $http({
          method: 'POST',
          url: '<%= config[:api_host] %>/login/forgot_password',
          data: serialize.from_object({"email": username}),
          headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        });
      },

      // change my password
      change_password: function(password, token){
        return $http({
          method: 'POST',
          url: '<%= config[:api_host] %>/login/forgot_password/reset/' + token,
          data: serialize.from_object({"new_password": password}),
          headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        });
      },

      // store wrapper
      session: function(){
        return store;
      },

      // load user data
      current_user: function(){
        return this.session().get(this.session_key);
      },

      // validate user
      // usage: validate_user({role: 'admin'})
      validate_user: function(){
        var args = arguments[0] || {};

        var user = this.current_user() || undefined;

        // validate session
        if(user == undefined) 
          document.location = this.sign_page;
        // validade role
        if(user.role != args.role)
          document.location = '/error/permissao-negada';

        return false;
      },

      signature_exists: function(){
        if(this.current_user) return true;
        return false;
      },

      // logout
      logout: function(){
        this.session().remove(this.session_key);
        if (arguments[0]) document.location = arguments[0];
        return false;
      }
    }
  }]);


  app.votolegal.controller('MenuController', ['$scope', '$http', 'serialize', 'auth_service', function($scope, $http, serialize, auth_service){ 
    $scope.current_user = auth_service.current_user() || {};

    $scope.is_admin = function(){
      var user = auth_service.current_user();
      if(user && user.role == 'user') return true;
      return false;
    };

    $scope.logout = function(){
      auth_service.logout('/');
      return false;
    };
  }]);

  /**
   * load votolegal controllers
   */
  <%= partial "javascripts/app/controller/pre-cadastro.js" %>
  <%= partial "javascripts/app/controller/contato.js" %>
  <%= partial "javascripts/app/controller/faq.js" %>
  <%= partial "javascripts/app/controller/auth.js" %>
  <%= partial "javascripts/app/controller/dashboard.js" %>
  <%= partial "javascripts/app/controller/pre-candidate.js" %>
  <%= partial "javascripts/app/controller/default.js" %>
  <%= partial "javascripts/app/controller/cadastro.js" %>

})(window.app = window.app || {});
